## File Name
	- Method Name
            - Proconditions
            - Postconditions
			- Method Parameters
			- Private || Public
			- Method Action
        
## main.cpp
    - main()
            - None
            - None
            - None
            - Public
            - Creates an instance of the Executive class and runs the program

## LinkedList.h & LinkedList.hpp
	- LinkedList()
            - None
            - An empty LinkedList object is created
            - None
            - Public
            - Assigns private member variables and creates an empty list

	- ~LinkedList()
			- None
			- All nodes in the LinkedList object are deleted
			- None
			- Public
			- Each element in the list is traversed and removed until no more exist

	- bool isEmpty() const
			- None
			- None
			- None
			- Public
			- Checks to see if the value associated with private member variable 'm_length' is greater than 0. If it is, isEmpty() will return 'false', otherwise 'true'

	- int getLength() const
			- None
			- None
			- None
			- Public
			- Returns the value associated with the number of nodes that are in the list at the time called

	- int positionOf(T value) const
			- T's type is overloaded with the '==' operator
			- None
			- Templated value
			- Public
			- Returns the index associated with the templated value. If it does not exist in the list, the user is notified

	- void addBack(T value)
			- The value 'T' is valid
			- A single, new element is created and added to the back of the list
			- Templated value
			- Public
			- Adds a new element to the end of the list

	- void addFront(T value) 
			- The value 'T' is valid
			- A single, new element is created and added to the front of the list
			- Templated value
			- Public
			- Adds a new element to the front of the list

	- bool insert(int position, T value)
			- None
			- A single, new element is created and added in the position specified
			- Templated value and an integer representing the index at which you wish to add the value
			- Public
			- Returns 'true' if the value was inserted at the given position, 'false' otherwise. NOTE: Position must fall between 0 and m_size (the number of elements in the list at the time of inserting)

	- bool removeBack() 
			- None
			- One element is removed from the back of the list
			- None
			- Public
			- Returns 'true' if the element at the end of the list is removed, 'false' if the list is empty

	- bool removeFont()
			- None
			- One element is removed from the front of the list
			- None
			- Public
			- Return 'true' if the element at the front of the list is removed, 'false' if the list is empty

	- bool removeAt(int position)
			- None
			- The element that is in the specified position is removed from the list
			- Integer representing the index at which you wish to remove a value
			- Public
			- Returns 'true' if the element at the given position is removed, 'false' otherwise

    - void setEntry(int position, T value)
			- None
			- The value at the given position is overridden with the value passed in
			- Integer representing the index you wish to change the value and the value you want
			- Public
			- The value at the given position is overridden with the value passed in. If the position is beyond the size of the list, the user is notified

    - T& getEntry(int position)
			- None
			- None
			- Integer representing the index you wish to have the value returned
			- Public
			- Returns the value associated with the index that is passed in as a parameter

    - bool search(T value) const
			- The value 'T' is valid
			- None
			- Templated value
			- Public
			- The list is searched and if the value passed in is found 'true' is returned, 'false' signifies that the value does not exist in the list
        
    - void sortListEvent()
            - None
            - The LinkedList is sorted by events
            - None
            - Public
            - The list is traversed and sorted by dates
      
    - bool compareEvent(T event1, T event2)
            - Two valid 'T' values
            - None
            - Two templated values
            - Public
            - The two values are compared, if event1 occurs before event2 'true' is returned, false otherwise

    - void sortListTime()
            - None
            - The LinkedList of times is sorted
            - None
            - Public
            - The list is traversed and sorted by time
      
    - void compareTime(T time1, T time2)
            - Two valid 'T' values
            - None
            - Two templated values
            - Public
            - The two values are compares, if time1 occurs before time2 'true' is returned, false otherwise

    - bool isFound(std::string name2)
            - None
            - None
            - String representing the name of a potential event
            - Public
            - The list is traversed and if an event exists with the same name as the one passed in 'true' is returned, false otherwise

##Node.h & Node.hpp
	- Node(T value)
            - None
            - A node with the passed value is created
			- Templated value
			- Public
			- Creates a new node with the value that is passed in as a parameter

	- T& getValue() 
            - None
            - None
			- None
			- Public
			- Returns the value that is associated with any given node

	- void setValue(T value)
            - Valid 'T' value
            - The value for a node is set
			- Templated value
			- Public
			- Sets the value of a node equal to the value passed in as a parameter

	- Node<T>* getNext() const
            - None
			- None
			- None
			- Public
			- Returns a pointer to the node that follows the original

	- void setNext(Node<T>* next)
            - None
            - Sets the next node to a pointer given by the user
			- A node pointer representing the next value in a list
			- Public
			- Sets the next node in a structure equal to the pointer that is passed in as a parameter
            
##Events.h & Events.cpp
    - Events()
            - None
			- Assigns member variables a default value and creates an event
			- None
			- Public
			- Creates an event with default values
            
    - Events(std::string name, int month, int day, int year)
            - None
			- Assigns member variables values passed in and creates an event
			- String representing name and integers representing the month, day and year
			- Public
			- Creates an event with passed in values
            
    - ~Events()
            - None
			- None
			- None
			- Public
			- Empty destructor
            
    - bool operator>(const Events& rhs) const
            - Valid event object
			- Compares two events
			- An event reference
			- Public
			- Two events are compared, if the year of the current event occurs earlier than the one passed in 'true' is returned. 'false' otherwise

    - bool operator<(const Events& rhs) const
            - Valid event object
			- Compares two events
			- An event reference
			- Public
			- Two events are compared, if the year of the current event occurs after than the one passed in 'true' is returned. 'false' otherwise

    - bool operator==(const Events& newEvent) const
            - Valid event object
			- Compares two events
			- An event reference
			- Public
			- Two events are compared, if the year of the current event is the same as the one passed in 'true' is returned. 'false' otherwise

      - void setName(std::string name)
            - The name is valid
            - The private member variable is set to match the parameter
            - A string representing the name of an event
            - Public
            - Private member variable m_name is set to name
            
      - void setMonth(int month)
            - The month value is valid
            - The private member variable is set to match the parameter
            - An integer representing the month
            - Public
            - Private member variable m_month is set to name

      - void setDay(int day)
            - The day value is valid
            - The private member variable is set to match the parameter
            - An integer representing the day
            - Public
            - Private member variable m_day is set to name

      - void setYear(int year)
            - The year value is valid
            - The private member variable is set to match the parameter
            - An integer representing the year
            - Public
            - Private member variable m_year is set to name
            
      - std::string getName( )
            - None
            - The name of an event is returned
            - None
            - Public
            - The name of the event being accessed is returned to the program
            
      - int getMonth( )
            - None
            - The month an event occurs is returned
            - None
            - Public
            - The month of the event being accessed is returned to the program

      - int getDay( )
            - None
            - The day an event occurs is returned
            - None
            - Public
            - The day of the event being accessed is returned to the progam

      - int getYear( )
            - None
            - The year an event occurs is returned
            - None
            - Public
            - The year of the event being accessed is returned to the program
            
      - LinkedList<TimeSlots>* getTimeSlots( ) const
            - None
            - The list of time slots for an event is returned
            - None
            - Public
            - The list of available time slots for the event being accessed is returned to the program
            
      - void getInfo( )
            - None
            - The info for an event is printed
            - None
            - Public
            - The information for an event is printed out so that the user can see it
            
## TimeSlots.h & TimeSlots.cpp






































